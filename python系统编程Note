《linux系统编程笔记》
第一节  多进程
多进程中的主进程子进程的执行先后顺序是不确定，由操作系统的调度算法决定，下面的多线程也一样

#在Linux/unix/mac环境下使用
1、使用fork（仅适用于linux/Uinx，windows上使用python跨平台库multiprocessing）
创建多进程（父进程/子进程），其运行是没有先后顺序的！

import os
os.getpid()//获取该进程号
os.ppid()//获取上一个进程的父进程号

2、全局变量、局部变量、函数在每一个进程（在多进程中）都是不共享的。
import os 
import time
g_num = 100
ret = os.fork()
if ret == 0://子进程
	print("----process-1------")
	g_num += 1
	print("----process-1 g_num=%d---"%g_num)
else://父进程
	time.sleep(3)  //延迟3秒，为了保证尽可能让子进程先执行
	print("----process-2------")
	print("----process-2 g_num=%d---"%g_num)

#输出：
#-------process-1------
#-------process-1 g_num=101-----
等3秒
#-------process-2------
#-------process-2 g_num=100-----
----------------------------------------------------------------------
---------


3、#在windows下使用multiprocessing(通用模块/跨平台模块)
from multiprocessing import Process
def test():
	print('------测试------')
p = Process(target = test)//创建子进程
p.start()//子进程开始执行

p.join([等待的最长时间])//需要等到某进程执行结束后，才继续执行p.join后的程序

 
-------------------------------
区别：！！！！
multiprocessing中的Process和fork不一样的地方是，Process会等程序中的子进程运行完以后
才结束。而fork则不是，不管子进程是否结束，父进程的程序任务结束后，不需要
等待子进程，直接自己结束（两者互不相干）。



4、Process子类
方法：另外一个创建子进程的新方式！！！！！
使用class Process_Class(Process)://创建一个新类，用于进程Process类，即可

eg:
from multiprocessing import Process
import time
class MyNewProcess(Process):
	def run(self):  //这个地方是重写了（相当于覆盖）Process父类中的run方法
		while True:
			print("------子进程------")
			time.sleep(1)
p = MyNewProcess()
p.start()  //start会调用run方法
while True:
	print("------主进程-----")
	time.sleep(1)



#最简单、最优化的创建多任务的方式！！！！！！！！！！！
5、创建进程池Pool  //进程池中的主进程一般是用来等待，，，而真正的任务都是在子进程中执行的

from multiprocessing import Pool

def worker(num):
	for i in range(5):
		print("----pid=%d-num=%d---"%(os.getpid(),num))

pool = Pool(3)

for i in range(10):
	print("---------")
	pool.apply_async(worker,(i,))  //apply_async()是非堵塞方式，实现多任务
					而apply()是堵塞方式，一个一个的任务进行，不是多任务，用的少，不好

pool.close()//关闭进程，相当于不能够再次添加新任务了
pool.join()//主进程 创建/添加 任务后，主进程 默认不会等待进程中
	的任务执行完后才结束，而是 当主进程的任务做完之后 
	立马结束，，，如果这个地方没join，会导致进程池中的任务不会执行
	join用来让主进程等待着子进程结束 






进程间的通讯方式有五种总结：

1.管道（通常称为无名管道）：速度慢，容量有限，只有父子进程能通讯    

2.FIFO（命名管道）：任何进程间都能通讯，但速度慢    

3.消息队列：容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题    

4.信号量：不能传递复杂消息，只能用来同步    

5.共享内存区：能够很容易控制容量，速度快，但要保持同步，比如一个进程在写的时候，
另一个进程要注意读写的问题，相当于线程中的线程安全，当然，共享内存区同样可以用作
线程间通讯，不过没这个必要，线程间本来就已经共享了同一进程内的一块内存。

（而多线程之间就不需要通信，本身就共享数据）
6、进程间通信 Queue（指的是消息队列） （进程间的通信有很多种方式，其中一个是queued队列） (19-进程间通信Queue-16;22处)
from multiprocessing import Queue


q = Queue(3)

q.qsize()//队列存入的大小（<3）
q.put("hhah")//放入
q.put("ququ")
q.get()//从队列中获取
q.empty()
q.full()
q.get_nowait()//相当于q.get(False) 
q.put_nowait(item)//相当于q.put(item,False)


//写个进程间通信的程序
from multiprocessing import Queue Process

def worker(p):
	for i in range(5):
		p.put(".....")
		print("----放入队列中----")
def study(p):
	while True:
		p.get()
		print("-----获取队列中的数据----")

if __name__ == "__main__":
	p=Queue() //()为空，表示用户想放至队列多少数据就放多少，随意
	 //父进程创建Queue，并传给各个子进程
	pworker = Process(target = worker,args=(p,))  //注意此处的args中的p
	pstudy = Process(target = study,args(p,))
	
	pworker.start()
	pworker.join()

	pstudy.start()
	pstudy.join()
7、进程池中的进程通信Queue
from multiprocessing import Manager!!!!!!

q = Manager().Queue()//使用Manager中的Queue来初始化
//其他和进程间的通信一样，如q.get()  q.put().....




第二节  多线程

进程是CPU资源分配的最小单位
线程是CPU任务调度的最小单位

方法一：
1、创建多线程
from threading import Thread

def worker()://子线程运行，要记住CPU真正调度的是子线程
	print("----多线程-----")
for i in range(5):
	p = Thread(target = worker)  //创建子线程//创建5个线程同时执行worker函数
	p.start()  //主线程，目的是：在等待子线程运行结束

以上需要注意：：： 如果多个线程执行的都是同一个函数的话，各自之间不会有影响，各顾各的。

方法二：
2、创建Thread线程子类
import threading

class MyThread(threading.Thread):
	def run():
		for i in range(5):
			time.sleep(1)
			print("----创建线程子类-----")
t = MyThread()
t.start()


3、线程的执行顺序
 多线程中的主线程和子线程的执行先后顺序是不确定的，同进程一样，也是由操作系统的调度算法决定

4、线程共享全局变量
（假如其中一个子线程对全局变量进行了修改，则当另一个子线程使用全局变量时，此时的全局变量应该
是上一个子线程修改后的全局变量的值）

!!!注意多线程的缺点：：：：
多个线程因对全局数据同时修改，导致数据修改错乱，并没有得到理想的最终结果时。
---------该解决方案是：----------
  1、考虑让尽量保证一个线程先运行，完了以后进行洗一个线程
	如：在线程之间加入time.sleep(10)设定睡眠事件

  2、轮询（09-避免全局变量被修改的方式.mp4  12：09处）
	(效率低)

  3、互斥锁[真正的Boss(比较好的方案)]！！！！！！！！！！！！！！
from threading import Lock
#创建锁，这个锁是默认没有上锁的
mutex = Lock()
#锁定
mutex.acquire([blocking])  注意：等待release解锁的方式是:通知  而不是轮询
#释放
mutex.release()

应用：
from threading import Thread ,Lock
g_num = 0 //定义一个全局变量
def test1():
	glable g_num
	#这个线程和test2线程都在抢着  对这个锁  进行上锁，若果有一方成功的上锁，
	#那么导致另外乙方会堵塞（一直等待）到这个锁被解开为止
	#锁定
	mutex.acquire()
	for i in range(1000000):
		g_num += 1
	#释放  解锁
	mutex.release()  #用来对mutex指向的这个锁  进行解锁，，，只要开了锁，
	#那么接下来会有让所有因为这个锁 被上了锁  而堵塞的线程  进行抢占上锁
	print("-------test1----g_num=%d"%g_num)
def test2():
	glable g_num 
	mutex.acquire()
	for i in range(1000000):
		g_num += 1
	mutex.release()

#定义一个互斥锁,这个锁默认是没有上锁的
mutex = Lock()

t1 = Thread(target = test1)
t1.start()
#其中一个方法设定睡眠时间   time.sleep(3)
t2 = Thread(target = test2)
t2.start()


5、死锁（根据楼上的程序可以试想，在互斥锁中当两个线程出现互相等待
	对方release释放（解锁）时，并且互不释放，就产生了死锁！）






